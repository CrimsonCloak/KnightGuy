name: "Create release from latest tag"
on:
  workflow_dispatch:
env: 
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
    check-release:
        name: Check and create release
        runs-on: ubuntu-latest
        steps:
          - name: Checkout
            uses: actions/checkout@v4
            with:
              fetch-depth: 0
          
          # Step to get the latest tag
          - name: Get latest tag
            id: get_latest_tag
            run: echo "LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV
    
          # Step to get the latest release
          - name: Get the most recent release
            id: get_latest_release
            uses: joutvhu/get-release@v1
            with:
              latest: true
              pattern: '^v.*'
              prerelease: true
    
          # Step to check if release already exists
          - name: Check if release for tag already exists
            id: check_release
            run: |
              echo "LATEST_TAG: ${{ env.LATEST_TAG }}"
              echo "Latest release tag: ${{ steps.get_latest_release.outputs.tag_name }}"
              if [ -z "${{ steps.get_latest_release.outputs.tag_name }}" ]; then
                echo "No releases found."
                echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
              elif [ "${{ env.LATEST_TAG }}" == "${{ steps.get_latest_release.outputs.tag_name }}" ]; then
                echo "Release already exists."
                echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
              else
                echo "Release does not exist."
                echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
              fi
    
          # Step to trigger next job 'create-release' based on  RELEASE_EXISTS
          
    create-release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        needs: check-release
        # {{ needs.check-release.outputs.check_release == 'false' }}
        steps:
            - name: Previous task output test
              run: |
                echo "${{ steps.check-release.outputs }}"

        # steps:
        # - name: Checkout
        #   uses: actions/checkout@v4

        # - name: Download Windows Artifact
        #   uses: actions/download-artifact@v4
        #   with:
        #     name: KnightGuy-Windows
        #     path: build/windows

        # - name: Download Linux Artifact
        #   uses: actions/download-artifact@v4
        #   with:
        #     name: KnightGuy-Linux
        #     path: build/linux

        # - name: Download Web Artifact
        #   uses: actions/download-artifact@v4
        #   with:
        #     name: KnightGuy-Web
        #     path: build/web

        # - name: Create Release
        #   uses: ncipollo/release-action@v1
        #   with:
        #         tag: ${{ env.LATEST_TAG }}
        #         name: Release ${{ env.LATEST_TAG }}
        #         artifacts: |
        #             build/windows/*
        #             build/linux/*
        #             build/web/*
        #         body: |
        #             Release ${{ env.LATEST_TAG }} of KnightGuy