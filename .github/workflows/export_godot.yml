name: "Export Godot game"
on: workflow_dispatch

env:
  GODOT_VERSION: 4.2.2
  EXPORT_NAME: KnightGuy
  PROJECT_PATH: .
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  export-windows:
    name: Windows Export
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:4.2.2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
      - name: Windows Build
        run: |
          mkdir -v -p build/windows
          cd $PROJECT_PATH
          godot --headless --verbose --export-release "Windows Desktop" build/windows/$EXPORT_NAME.exe
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: KnightGuy-Windows
          path: build/windows

  export-linux:
    name: Linux Export
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:4.2.2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
      - name: Linux Build
        run: |
          mkdir -v -p build/linux
          cd $PROJECT_PATH
          godot --headless --verbose --export-release "Linux/X11" build/linux/$EXPORT_NAME.x86_64
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: KnightGuy-Linux
          path: build/linux

  export-web:
    name: Web Export
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:4.2.2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
      - name: Web Build
        run: |
          mkdir -v -p build/web
          cd $PROJECT_PATH
          godot --headless --verbose --export-release "Web" build/web/index.html
      - name: Add coi-serviceworker.js
        run: |
          wget https://raw.githubusercontent.com/gzuidhof/coi-serviceworker/master/coi-serviceworker.js -O build/web/coi-serviceworker.js
      - name: Modify index.html to include service worker
        run: |
          sed -i 's|</head>|<script src="coi-serviceworker.js"></script></head>|' build/web/index.html
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: KnightGuy-Web
          path: build/web
      - name: Install rsync ðŸ“š
        run: |
          apt-get update && apt-get install -y rsync
      - name: Deploy to GitHub Pages ðŸš€
        uses: JamesIves/github-pages-deploy-action@releases/v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: build/web # The folder the action should deploy.

  check-release:
    name: Check and create release
    runs-on: ubuntu-latest
    needs: [export-windows, export-linux, export-web]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Get latest tag
        id: get_latest_tag
        run: echo "LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

      - name: Get the most recent release
        id: get_latest_release
        uses: joutvhu/get-release@v1
        with:
          latest: true
          # Tag name start with `v`
          pattern: '^v.*'
          # Including pre-release
          prerelease: true
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if release already exists
        id: check_release
        run: |
          if [ "${{ env.LATEST_TAG }}" == "${{ steps.get_latest_release.outputs.tag_name }}" ]; then
            echo "Release already exists."
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Trigger release workflow
        if: env.RELEASE_EXISTS == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            await github.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              ref: 'main',
              inputs: {
                tag_name: process.env.LATEST_TAG
              }
            });

